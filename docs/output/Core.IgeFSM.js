Ext.data.JsonP.Core_IgeFSM({"tagname":"class","name":"Core.IgeFSM","autodetected":{},"files":[{"filename":"IgeFSM.js","href":"IgeFSM.html#Core-IgeFSM"}],"alternateClassNames":["IgeFSM"],"extends":"IgeClass","members":[{"name":"_transitionStates","tagname":"method","owner":"Core.IgeFSM","id":"method-_transitionStates","meta":{"private":true}},{"name":"addComponent","tagname":"method","owner":"Core.IgeClass","id":"method-addComponent","meta":{}},{"name":"classId","tagname":"method","owner":"Core.IgeClass","id":"method-classId","meta":{}},{"name":"currentStateName","tagname":"method","owner":"Core.IgeFSM","id":"method-currentStateName","meta":{}},{"name":"data","tagname":"method","owner":"Core.IgeClass","id":"method-data","meta":{}},{"name":"debug","tagname":"method","owner":"Core.IgeFSM","id":"method-debug","meta":{}},{"name":"defineState","tagname":"method","owner":"Core.IgeFSM","id":"method-defineState","meta":{"chainable":true}},{"name":"defineTransition","tagname":"method","owner":"Core.IgeFSM","id":"method-defineTransition","meta":{}},{"name":"enterState","tagname":"method","owner":"Core.IgeFSM","id":"method-enterState","meta":{}},{"name":"exitState","tagname":"method","owner":"Core.IgeFSM","id":"method-exitState","meta":{}},{"name":"extend","tagname":"method","owner":"Core.IgeClass","id":"method-extend","meta":{}},{"name":"getState","tagname":"method","owner":"Core.IgeFSM","id":"method-getState","meta":{}},{"name":"implement","tagname":"method","owner":"Core.IgeClass","id":"method-implement","meta":{}},{"name":"initialState","tagname":"method","owner":"Core.IgeFSM","id":"method-initialState","meta":{}},{"name":"initialStateName","tagname":"method","owner":"Core.IgeFSM","id":"method-initialStateName","meta":{}},{"name":"log","tagname":"method","owner":"Core.IgeClass","id":"method-log","meta":{}},{"name":"previousStateName","tagname":"method","owner":"Core.IgeFSM","id":"method-previousStateName","meta":{}},{"name":"removeComponent","tagname":"method","owner":"Core.IgeClass","id":"method-removeComponent","meta":{}},{"name":"vanilla","tagname":"method","owner":"Core.IgeClass","id":"method-vanilla","meta":{}}],"aliases":{},"id":"class-Core.IgeFSM","component":false,"superclasses":["Core.IgeClass"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Alternate names</h4><div class='alternate-class-name'>IgeFSM</div><h4>Hierarchy</h4><div class='subclass first-child'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='docClass'>Core.IgeClass</a><div class='subclass '><strong>Core.IgeFSM</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/IgeFSM.html#Core-IgeFSM' target='_blank'>IgeFSM.js</a></div></pre><div class='doc-contents'><p>A simple finite state machine implementation.</p>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-_transitionStates' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-_transitionStates' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-_transitionStates' class='name expandable'>_transitionStates</a>( <span class='pre'>oldStateName, newStateName, [data], [callback]</span> )<span class=\"signature\"><span class='private' >private</span></span></div><div class='description'><div class='short'>Handles changing states from one to another by checking for transitions and\nhandling callbacks. ...</div><div class='long'><p>Handles changing states from one to another by checking for transitions and\nhandling callbacks.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>oldStateName</span> : String<div class='sub-desc'><p>The name of the state we are transitioning from.</p>\n</div></li><li><span class='pre'>newStateName</span> : String<div class='sub-desc'><p>The name of the state we are transitioning to.</p>\n</div></li><li><span class='pre'>data</span> : * (optional)<div class='sub-desc'><p>Optional data to pass to the exit and enter methods of each state.</p>\n</div></li><li><span class='pre'>callback</span> : Function (optional)<div class='sub-desc'><p>Optional callback method to execute once the transition\nhas been completed.</p>\n</div></li></ul></div></div></div><div id='method-addComponent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='defined-in docClass'>Core.IgeClass</a><br/><a href='source/IgeClass.html#Core-IgeClass-method-addComponent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeClass-method-addComponent' class='name expandable'>addComponent</a>( <span class='pre'>component, [options]</span> ) : <a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Creates a new instance of the component argument passing\nthe options argument to the component as it is initialised. ...</div><div class='long'><p>Creates a new instance of the component argument passing\nthe options argument to the component as it is initialised.\nThe new component instance is then added to \"this\" via\na property name that is defined in the component class as\n\"componentId\".</p>\n\n<h2>Add the velocity component to an entity</h2>\n\n<pre><code>var entity = new IgeEntity();\nentity.addComponent(IgeVelocityComponent);\n\n// Now that the component is added, we can access\n// the component via it's namespace. Call the\n// \"byAngleAndPower\" method of the velocity component:\nentity.velocity.byAngleAndPower(Math.radians(20), 0.1);\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>component</span> : <a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a><div class='sub-desc'><p>The class definition of the component.</p>\n</div></li><li><span class='pre'>options</span> : Object (optional)<div class='sub-desc'><p>An options parameter to pass to the component\non init.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-classId' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='defined-in docClass'>Core.IgeClass</a><br/><a href='source/IgeClass.html#Core-IgeClass-method-classId' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeClass-method-classId' class='name expandable'>classId</a>( <span class='pre'></span> ) : string<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the class id. ...</div><div class='long'><p>Returns the class id. Primarily used to help identify\nwhat class an instance was instantiated with and is also\noutput during the ige.scenegraph() method's console logging\nto show what class an object belongs to.</p>\n\n<h2>Get the class id of an object</h2>\n\n<pre><code>var entity = new IgeEntity();\n\n// Will output \"IgeEntity\"\nconsole.log(entity.classId());\n</code></pre>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>string</span><div class='sub-desc'><p>class id</p>\n</div></li></ul></div></div></div><div id='method-currentStateName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-currentStateName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-currentStateName' class='name expandable'>currentStateName</a>( <span class='pre'></span> ) : string<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name of the current state. ...</div><div class='long'><p>Returns the name of the current state.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>string</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-data' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='defined-in docClass'>Core.IgeClass</a><br/><a href='source/IgeClass.html#Core-IgeClass-method-data' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeClass-method-data' class='name expandable'>data</a>( <span class='pre'>key, [value]</span> ) : <a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a>/Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets / sets a key / value pair in the object's data object. ...</div><div class='long'><p>Gets / sets a key / value pair in the object's data object. Useful for\nstoring arbitrary game data in the object.</p>\n\n<h2>Set some arbitrary data key value pair</h2>\n\n<pre><code>var entity = new IgeEntity();\nentity.data('playerScore', 100);\nentity.data('playerName', 'iRock');\n</code></pre>\n\n<h2>Get the value of a data key</h2>\n\n<pre><code>console.log(entity.data('playerScore'));\nconsole.log(entity.data('playerName'));\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>key</span> : String<div class='sub-desc'><p>The key under which the data resides.</p>\n</div></li><li><span class='pre'>value</span> : Object (optional)<div class='sub-desc'><p>The data to set under the specified key.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a>/Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-debug' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-debug' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-debug' class='name expandable'>debug</a>( <span class='pre'>[val]</span> ) : *<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets / sets the debug flag. ...</div><div class='long'><p>Gets / sets the debug flag. If set to true will enable console logging\nof state changes / events.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>val</span> : Boolean (optional)<div class='sub-desc'><p>Set to true to enable.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>*</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-defineState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-defineState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-defineState' class='name expandable'>defineState</a>( <span class='pre'>name, definition</span> ) : <a href=\"#!/api/Core.IgeFSM\" rel=\"Core.IgeFSM\" class=\"docClass\">IgeFSM</a><span class=\"signature\"><span class='chainable' >chainable</span></span></div><div class='description'><div class='short'>Defines a state with a name and a state definition. ...</div><div class='long'><p>Defines a state with a name and a state definition.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String<div class='sub-desc'><p>The name of the state to define.</p>\n</div></li><li><span class='pre'>definition</span> : Object<div class='sub-desc'><p>The state definition object.</p>\n\n<h2>Define a state</h2>\n\n<pre><code>var fsm = new IgeFSM();\n\n// Define an \"idle\" state\nfsm.defineState('idle', {\n    enter: function (data, completeCallback) {\n        console.log('entered idle state');\n        completeCallback();\n    },\n    exit: function (data, completeCallback) {\n        console.log('exited idle state');\n        completeCallback();\n    }\n});\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Core.IgeFSM\" rel=\"Core.IgeFSM\" class=\"docClass\">IgeFSM</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-defineTransition' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-defineTransition' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-defineTransition' class='name expandable'>defineTransition</a>( <span class='pre'>fromState, toState, transitionCheck</span> ) : *<span class=\"signature\"></span></div><div class='description'><div class='short'>Defines a transition between two states. ...</div><div class='long'><p>Defines a transition between two states.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fromState</span> : String<div class='sub-desc'><p>The state name the transition is from.</p>\n</div></li><li><span class='pre'>toState</span> : String<div class='sub-desc'><p>The state name the transition is to.</p>\n</div></li><li><span class='pre'>transitionCheck</span> : Function<div class='sub-desc'><p>A method to call just before this transition\nbetween the two specified states is executed, that will call the callback method\npassed to it in the second parameter and include either true to allow the\ntransition to continue, or false to cancel it in the first parameter.</p>\n\n<h2>Define a state transition</h2>\n\n<pre><code>var fsm = new IgeFSM();\n\n// Define an \"idle\" state\nfsm.defineState('idle', {\n    enter: function (data, completeCallback) {\n        console.log('entered idle state');\n        completeCallback();\n    },\n    exit: function (data, completeCallback) {\n        console.log('exited idle state');\n        completeCallback();\n    }\n});\n\n// Define a \"moving\" state\nfsm.defineState('moving', {\n    enter: function (data, completeCallback) {\n        console.log('entered moving state');\n        completeCallback();\n    },\n    exit: function (data, completeCallback) {\n        console.log('exited moving state');\n        completeCallback();\n    }\n});\n\n// Define a transition between the two methods\nfsm.defineTransition('idle', 'moving', function (data, callback) {\n    // Check some data we were passed\n    if (data === 'ok') {\n        // Callback the listener and tell them there was no error\n        // (first argument is an err flag, set to false for no error)\n        callback(false);\n    } else {\n        // Callback and say there was an error by passing anything other\n        // than false in the first argument\n        callback('Some error string, or true or any data');\n    }\n});\n\n// Now change states and cause it to fail\nfsm.enterState('moving', 'notOk', function (err, data) {\n    if (!err) {\n        // There was no error, the state changed successfully\n        console.log('State changed!', fsm.currentStateName());\n    } else {\n        // There was an error, the state did not change\n        console.log('State did NOT change!', fsm.currentStateName());\n    }\n});\n\n// Now change states and pass \"ok\" in the data to make it proceed\nfsm.enterState('moving', 'ok', function (err, data) {\n    if (!err) {\n        // There was no error, the state changed successfully\n        console.log('State changed!', fsm.currentStateName());\n    } else {\n        // There was an error, the state did not change\n        console.log('State did NOT change!', fsm.currentStateName());\n    }\n});\n</code></pre>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>*</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-enterState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-enterState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-enterState' class='name expandable'>enterState</a>( <span class='pre'>newStateName, data, [callback]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tell the FSM to enter the state specified. ...</div><div class='long'><p>Tell the FSM to enter the state specified.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>newStateName</span> : String<div class='sub-desc'><p>The new state to enter.</p>\n</div></li><li><span class='pre'>data</span> : *<div class='sub-desc'><p>Any data to pass to the exit and enter methods.</p>\n</div></li><li><span class='pre'>callback</span> : Function (optional)<div class='sub-desc'><p>The optional callback method to call on completion.</p>\n</div></li></ul></div></div></div><div id='method-exitState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-exitState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-exitState' class='name expandable'>exitState</a>( <span class='pre'>[callback]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Tell the FSM to exit the current state and enter the previous state. ...</div><div class='long'><p>Tell the FSM to exit the current state and enter the previous state.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>callback</span> : Function (optional)<div class='sub-desc'><p>Optional callback method once exiting the state\nhas been executed.</p>\n</div></li></ul></div></div></div><div id='method-extend' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='defined-in docClass'>Core.IgeClass</a><br/><a href='source/IgeClass.html#Core-IgeClass-method-extend' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeClass-method-extend' class='name expandable'>extend</a>( <span class='pre'></span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Create a new IgeClass that inherits from this class\n\nCreating a new class by extending an existing one\n\nvar NewClass ...</div><div class='long'><p>Create a new IgeClass that inherits from this class</p>\n\n<h2>Creating a new class by extending an existing one</h2>\n\n<pre><code>var NewClass = <a href=\"#!/api/Core.IgeClass-method-extend\" rel=\"Core.IgeClass-method-extend\" class=\"docClass\">IgeClass.extend</a>({\n    // Init is your constructor\n    init: function () {\n        console.log('I\\'m alive!');\n    }\n});\n</code></pre>\n\n<p>Further reading: <a href=\"http://www.isogenicengine.com/documentation/isogenic-game-engine/versions/1-1-0/manual/engine-fundamentals/classes/extending-classes/\">Extending Classes</a></p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-getState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-getState' class='name expandable'>getState</a>( <span class='pre'>stateName</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the state definition object for the specified state name. ...</div><div class='long'><p>Gets the state definition object for the specified state name.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stateName</span> : String<div class='sub-desc'><p>The name of the state who's definition object should\nbe looked up and returned.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The state definition object or undefined if no state exists\nwith that name.</p>\n</div></li></ul></div></div></div><div id='method-implement' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='defined-in docClass'>Core.IgeClass</a><br/><a href='source/IgeClass.html#Core-IgeClass-method-implement' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeClass-method-implement' class='name expandable'>implement</a>( <span class='pre'>classObj, overwrite</span> ) : <a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Copies all properties and methods from the classObj object\nto \"this\". ...</div><div class='long'><p>Copies all properties and methods from the classObj object\nto \"this\". If the overwrite flag is not set or set to false,\nonly properties and methods that don't already exists in\n\"this\" will be copied. If overwrite is true, they will be\ncopied regardless.</p>\n\n<h2>Implement all the methods of an object into another object</h2>\n\n<pre><code>// Create a couple of test entities with ids\nvar entity1 = new IgeEntity().id('entity1'),\n    entity2 = new IgeEntity().id('entity2');\n\n// Let's define an object with a couple of methods\nvar obj = {\n    newMethod1: function () {\n        console.log('method1 called on object: ' + this.id());\n    },\n\n    newMethod2: function () {\n        console.log('method2 called on object: ' + this.id());\n    }\n};\n\n// Now let's implement the methods on our entities\nentity1.implement(obj);\nentity2.implement(obj);\n\n// The entities now have the newMethod1 and newMethod2\n// methods as part of their instance so we can call them:\nentity1.newMethod1();\n\n// The output to the console is:\n//    method1 called on object: entity1\n\n// Now let's call newMethod2 on entity2:\nentity2.newMethod2();\n\n// The output to the console is:\n//    method2 called on object: entity2\n\n// As you can see, this is a great way to add extra modular\n// functionality to objects / entities at runtime.\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>classObj</span> : Function<div class='sub-desc'>\n</div></li><li><span class='pre'>overwrite</span> : Boolean<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-initialState' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-initialState' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-initialState' class='name expandable'>initialState</a>( <span class='pre'>stateName, [data], [callback]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>After defining your states, call this with the state name and the initial\nstate of the FSM will be set. ...</div><div class='long'><p>After defining your states, call this with the state name and the initial\nstate of the FSM will be set.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>stateName</span> : String<div class='sub-desc'><p>The state to set as the initial state.</p>\n</div></li><li><span class='pre'>data</span> : * (optional)<div class='sub-desc'><p>Any data you wish to pass the state's \"enter\" method.</p>\n</div></li><li><span class='pre'>callback</span> : Function (optional)<div class='sub-desc'><p>An optional callback method that will be called\nonce the state has been entered successfully, or if there was an error.</p>\n</div></li></ul></div></div></div><div id='method-initialStateName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-initialStateName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-initialStateName' class='name expandable'>initialStateName</a>( <span class='pre'></span> ) : string<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name of the initial state. ...</div><div class='long'><p>Returns the name of the initial state.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>string</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-log' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='defined-in docClass'>Core.IgeClass</a><br/><a href='source/IgeClass.html#Core-IgeClass-method-log' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeClass-method-log' class='name expandable'>log</a>( <span class='pre'>text, type, [obj]</span> ) : <a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Provides logging capabilities to all IgeClass instances. ...</div><div class='long'><p>Provides logging capabilities to all IgeClass instances.</p>\n\n<h2>Log a message</h2>\n\n<pre><code>var entity = new IgeEntity();\n\n// Will output:\n//     IGE *log* [IgeEntity] : hello\nentity.log('Hello');\n</code></pre>\n\n<h2>Log an info message with an optional parameter</h2>\n\n<pre><code>var entity = new IgeEntity(),\n    param = 'moo';\n\n// Will output:\n//    moo\n//    IGE *log* [IgeEntity] : hello\nentity.log('Hello', 'info', param);\n</code></pre>\n\n<h2>Log a warning message (which will cause a stack trace to be shown)</h2>\n\n<pre><code>var entity = new IgeEntity();\n\n// Will output (stack trace is just an example here, real one will be more useful):\n//    Stack: {anonymous}()@&lt;anonymous&gt;:2:8\n//    ---- Object.InjectedScript._evaluateOn (&lt;anonymous&gt;:444:39)\n//    ---- Object.InjectedScript._evaluateAndWrap (&lt;anonymous&gt;:403:52)\n//    ---- Object.InjectedScript.evaluate (&lt;anonymous&gt;:339:21)\n//    IGE *warning* [IgeEntity] : A test warning\nentity.log('A test warning', 'warning');\n</code></pre>\n\n<h2>Log an error message (which will cause an exception to be raised and a stack trace to be shown)</h2>\n\n<pre><code>var entity = new IgeEntity();\n\n// Will output (stack trace is just an example here, real one will be more useful):\n//    Stack: {anonymous}()@&lt;anonymous&gt;:2:8\n//    ---- Object.InjectedScript._evaluateOn (&lt;anonymous&gt;:444:39)\n//    ---- Object.InjectedScript._evaluateAndWrap (&lt;anonymous&gt;:403:52)\n//    ---- Object.InjectedScript.evaluate (&lt;anonymous&gt;:339:21)\n//    IGE *error* [IgeEntity] : An error message\nentity.log('An error message', 'error');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>text</span> : String<div class='sub-desc'><p>The text to log.</p>\n</div></li><li><span class='pre'>type</span> : String<div class='sub-desc'><p>The type of log to output, can be 'log',\n'info', 'warning' or 'error'.</p>\n</div></li><li><span class='pre'>obj</span> : Object (optional)<div class='sub-desc'><p>An optional object that will be output\nbefore the log text is output.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-previousStateName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Core.IgeFSM'>Core.IgeFSM</span><br/><a href='source/IgeFSM.html#Core-IgeFSM-method-previousStateName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeFSM-method-previousStateName' class='name expandable'>previousStateName</a>( <span class='pre'></span> ) : string<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the name of the previous state. ...</div><div class='long'><p>Returns the name of the previous state.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>string</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-removeComponent' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='defined-in docClass'>Core.IgeClass</a><br/><a href='source/IgeClass.html#Core-IgeClass-method-removeComponent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeClass-method-removeComponent' class='name expandable'>removeComponent</a>( <span class='pre'>componentId</span> ) : <a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Removes a component by it's id. ...</div><div class='long'><p>Removes a component by it's id.</p>\n\n<h2>Remove a component by it's id (namespace)</h2>\n\n<pre><code>var entity = new IgeEntity();\n\n// Let's add the velocity component\nentity.addComponent(IgeVelocityComponent);\n\n// Now that the component is added, let's remove\n// it via it's id (\"velocity\")\nentity.removeComponent('velocity');\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>componentId</span> : String<div class='sub-desc'><p>The id of the component to remove.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/Core.IgeClass\" rel=\"Core.IgeClass\" class=\"docClass\">IgeClass</a></span><div class='sub-desc'><p>this</p>\n</div></li></ul></div></div></div><div id='method-vanilla' class='member  inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><a href='#!/api/Core.IgeClass' rel='Core.IgeClass' class='defined-in docClass'>Core.IgeClass</a><br/><a href='source/IgeClass.html#Core-IgeClass-method-vanilla' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Core.IgeClass-method-vanilla' class='name expandable'>vanilla</a>( <span class='pre'>prop</span> ) : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>Test method ...</div><div class='long'><p>Test method</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>prop</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});